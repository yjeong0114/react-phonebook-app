{"ast":null,"code":"import { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\n\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = auth.onAuthStateChanged(subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\n\n\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = auth.onIdTokenChanged(subscriber);\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\n\n\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(user.getIdToken()) : of(null);\n  }));\n}\n\nexport { authState, idToken, user };","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AACO,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;EAC5B,OAAO,IAAIC,UAAJ,CAAe,UAAUC,UAAV,EAAsB;IACxC,IAAIC,WAAW,GAAGH,IAAI,CAACI,kBAAL,CAAwBF,UAAxB,CAAlB;IACA,OAAO;MAAEC,WAAW,EAAEA;IAAf,CAAP;EACH,CAHM,CAAP;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACO,SAASE,IAAT,CAAcL,IAAd,EAAoB;EACvB,OAAO,IAAIC,UAAJ,CAAe,UAAUC,UAAV,EAAsB;IACxC,IAAIC,WAAW,GAAGH,IAAI,CAACM,gBAAL,CAAsBJ,UAAtB,CAAlB;IACA,OAAO;MAAEC,WAAW,EAAEA;IAAf,CAAP;EACH,CAHM,CAAP;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACO,SAASI,OAAT,CAAiBP,IAAjB,EAAuB;EAC1B,OAAOK,IAAI,CAACL,IAAD,CAAJ,CAAWQ,IAAX,CAAgBC,SAAS,CAAC,UAAUJ,IAAV,EAAgB;IAAE,OAAQA,IAAI,GAAGK,IAAI,CAACL,IAAI,CAACM,UAAL,EAAD,CAAP,GAA6BC,EAAE,CAAC,IAAD,CAA3C;EAAqD,CAAxE,CAAzB,CAAP;AACJ","names":["authState","auth","Observable","subscriber","unsubscribe","onAuthStateChanged","user","onIdTokenChanged","idToken","pipe","switchMap","from","getIdToken","of"],"sources":["../../auth/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nexport function authState(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = auth.onAuthStateChanged(subscriber);\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nexport function user(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = auth.onIdTokenChanged(subscriber);\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nexport function idToken(auth) {\n    return user(auth).pipe(switchMap(function (user) { return (user ? from(user.getIdToken()) : of(null)); }));\n}\n"]},"metadata":{},"sourceType":"module"}
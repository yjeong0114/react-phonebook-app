{"ast":null,"code":"let token = 'e380ea9d868f0e5a0d484aa743c5532200415729e86b10f1';\nexport const server_calls = {\n  get: async () => {\n    const response = await fetch(`https://phonebookv3.herokuapp.com//api/contacts`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': `Bearer ${token}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch data from server');\n    }\n\n    return await response.json();\n  },\n  create: async function () {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const response = await fetch(`https://phonebookv3.herokuapp.com//api/contacts`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': `Bearer ${token}`\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to Create new data on server');\n    }\n\n    return await response.json();\n  },\n  update: async function (id) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const response = await fetch(`https://phonebookv3.herokuapp.com/api/contacts/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': `Bearer ${token}`\n      },\n      body: JSON.stringify(data)\n    });\n  },\n  delete: async id => {\n    const response = await fetch(`https://phonebookv3.heroxkuapp.com/api/contacts/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-access-token': `Bearer ${token}`\n      }\n    });\n  }\n};","map":{"version":3,"names":["token","server_calls","get","response","fetch","method","headers","ok","Error","json","create","data","body","JSON","stringify","update","id","delete"],"sources":["/Users/yoonhwajeong/Documents/codingtemple/react/react-phonebook/react-phonebook-codealong/src/api/server.ts"],"sourcesContent":["let token = 'e380ea9d868f0e5a0d484aa743c5532200415729e86b10f1';\n\nexport const server_calls = {\n    get: async () => {\n        const response = await fetch(`https://phonebookv3.herokuapp.com//api/contacts`,{\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-access-token': `Bearer ${token}`\n            }\n        });\n\n        if (!response.ok){\n            throw new Error('Failed to fetch data from server')\n        }\n\n        return await response.json()\n    },\n    create: async(data: any = {}) => {\n        const response = await fetch(`https://phonebookv3.herokuapp.com//api/contacts`,{\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-access-token': `Bearer ${token}`\n            },\n            body: JSON.stringify(data)\n        });\n\n        if(!response.ok){\n            throw new Error('Failed to Create new data on server')\n        }\n\n        return await response.json()\n\t},\n    update: async (id:string, data:any = {}) => {\n        const response = await fetch(`https://phonebookv3.herokuapp.com/api/contacts/${id}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'x-access-token': `Bearer ${token}`\n            },\n            body: JSON.stringify(data)\n        });\n    },\n    delete: async(id:string) => {\n    const response = await fetch(`https://phonebookv3.heroxkuapp.com/api/contacts/${id}`,{\n        method: 'DELETE',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-access-token': `Bearer ${token}`\n        }\n    })\n    }\n}\n"],"mappings":"AAAA,IAAIA,KAAK,GAAG,kDAAZ;AAEA,OAAO,MAAMC,YAAY,GAAG;EACxBC,GAAG,EAAE,YAAY;IACb,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,iDAAF,EAAmD;MAC3EC,MAAM,EAAE,KADmE;MAE3EC,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,kBAAmB,UAASN,KAAM;MAF7B;IAFkE,CAAnD,CAA5B;;IAQA,IAAI,CAACG,QAAQ,CAACI,EAAd,EAAiB;MACb,MAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;IACH;;IAED,OAAO,MAAML,QAAQ,CAACM,IAAT,EAAb;EACH,CAfuB;EAgBxBC,MAAM,EAAE,kBAAyB;IAAA,IAAnBC,IAAmB,uEAAP,EAAO;IAC7B,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,iDAAF,EAAmD;MAC3EC,MAAM,EAAE,MADmE;MAE3EC,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,kBAAmB,UAASN,KAAM;MAF7B,CAFkE;MAM3EY,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;IANqE,CAAnD,CAA5B;;IASA,IAAG,CAACR,QAAQ,CAACI,EAAb,EAAgB;MACZ,MAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;IACH;;IAED,OAAO,MAAML,QAAQ,CAACM,IAAT,EAAb;EACN,CA/B0B;EAgCxBM,MAAM,EAAE,gBAAOC,EAAP,EAAoC;IAAA,IAAlBL,IAAkB,uEAAP,EAAO;IACxC,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAE,kDAAiDY,EAAG,EAAtD,EAAyD;MACjFX,MAAM,EAAE,MADyE;MAEjFC,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,kBAAmB,UAASN,KAAM;MAF7B,CAFwE;MAMjFY,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf;IAN2E,CAAzD,CAA5B;EAQH,CAzCuB;EA0CxBM,MAAM,EAAE,MAAMD,EAAN,IAAoB;IAC5B,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,mDAAkDY,EAAG,EAAvD,EAAyD;MACjFX,MAAM,EAAE,QADyE;MAEjFC,OAAO,EAAE;QACL,gBAAgB,kBADX;QAEL,kBAAmB,UAASN,KAAM;MAF7B;IAFwE,CAAzD,CAA5B;EAOC;AAlDuB,CAArB"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Observable, from } from 'rxjs';\nimport { debounceTime, shareReplay, map } from 'rxjs/operators';\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var progress = function (snap) {\n      return subscriber.next(snap);\n    };\n\n    var error = function (e) {\n      return subscriber.error(e);\n    };\n\n    var complete = function () {\n      return subscriber.complete();\n    }; // emit the current state of the task\n\n\n    progress(task.snapshot); // emit progression of the task\n\n    var unsubscribeFromOnStateChanged = task.on('state_changed', progress); // use the promise form of task, to get the last success snapshot\n\n    task.then(function (snapshot) {\n      progress(snapshot);\n      setTimeout(function () {\n        return complete();\n      }, 0);\n    }, function (e) {\n      progress(task.snapshot);\n      setTimeout(function () {\n        return error(e);\n      }, 0);\n    }); // the unsubscribe method returns by storage isn't typed in the\n    // way rxjs expects, Function vs () => void, so wrap it\n\n    return function unsubscribe() {\n      unsubscribeFromOnStateChanged();\n    };\n  }).pipe( // since we're emitting first the current snapshot and then progression\n  // it's possible that we could double fire synchronously; namely when in\n  // a terminal state (success, error, canceled). Debounce to address.\n  debounceTime(0));\n}\n\nfunction getDownloadURL(ref) {\n  return from(ref.getDownloadURL());\n} // TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction getMetadata(ref) {\n  return from(ref.getMetadata());\n}\n\nfunction put(ref, data, metadata) {\n  return new Observable(function (subscriber) {\n    var task = ref.put(data, metadata);\n    return fromTask(task).subscribe(subscriber).add(task.cancel);\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n}\n\nfunction putString(ref, data, format, metadata) {\n  return new Observable(function (subscriber) {\n    var task = ref.putString(data, format, metadata);\n    return fromTask(task).subscribe(subscriber).add(task.cancel);\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n}\n\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (s) {\n    return {\n      progress: s.bytesTransferred / s.totalBytes * 100,\n      snapshot: s\n    };\n  }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, put, putString };","map":{"version":3,"mappings":"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","names":["fromTask","task","Observable","subscriber","progress","snap","next","error","e","complete","snapshot","unsubscribeFromOnStateChanged","on","then","setTimeout","unsubscribe","pipe","debounceTime","getDownloadURL","ref","from","getMetadata","put","data","metadata","subscribe","add","cancel","shareReplay","bufferSize","refCount","putString","format","percentage","map","s","bytesTransferred","totalBytes"],"sources":["../../storage/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, map, shareReplay } from 'rxjs/operators';\nexport function fromTask(task) {\n    return new Observable(function (subscriber) {\n        var progress = function (snap) { return subscriber.next(snap); };\n        var error = function (e) { return subscriber.error(e); };\n        var complete = function () { return subscriber.complete(); };\n        // emit the current state of the task\n        progress(task.snapshot);\n        // emit progression of the task\n        var unsubscribeFromOnStateChanged = task.on('state_changed', progress);\n        // use the promise form of task, to get the last success snapshot\n        task.then(function (snapshot) {\n            progress(snapshot);\n            setTimeout(function () { return complete(); }, 0);\n        }, function (e) {\n            progress(task.snapshot);\n            setTimeout(function () { return error(e); }, 0);\n        });\n        // the unsubscribe method returns by storage isn't typed in the\n        // way rxjs expects, Function vs () => void, so wrap it\n        return function unsubscribe() {\n            unsubscribeFromOnStateChanged();\n        };\n    }).pipe(\n    // since we're emitting first the current snapshot and then progression\n    // it's possible that we could double fire synchronously; namely when in\n    // a terminal state (success, error, canceled). Debounce to address.\n    debounceTime(0));\n}\nexport function getDownloadURL(ref) {\n    return from(ref.getDownloadURL());\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadata(ref) {\n    return from(ref.getMetadata());\n}\nexport function put(ref, data, metadata) {\n    return new Observable(function (subscriber) {\n        var task = ref.put(data, metadata);\n        return fromTask(task).subscribe(subscriber).add(task.cancel);\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\nexport function putString(ref, data, format, metadata) {\n    return new Observable(function (subscriber) {\n        var task = ref.putString(data, format, metadata);\n        return fromTask(task).subscribe(subscriber).add(task.cancel);\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\nexport function percentage(task) {\n    return fromTask(task).pipe(map(function (s) { return ({\n        progress: (s.bytesTransferred / s.totalBytes) * 100,\n        snapshot: s\n    }); }));\n}\n"]},"metadata":{},"sourceType":"module"}